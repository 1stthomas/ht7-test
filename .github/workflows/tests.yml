name: "PHPUnit"

on:
  push:
    branches: 
      - master
      - develop
    paths:
      - '**'
      - '!.build/**'
  pull_request:
    branches: 
      - master
      - develop
    types:
      - opened

jobs:
  Action-Linting:
    name: GitHub Actions Linting
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4.1.0
      - uses: devops-actions/actionlint@v0.1.2

  # PHPStan:
  #   # name: PHPStan
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: php-actions/composer@v6
  #   - uses: php-actions/phpstan@v3
  #     with:
  #       level: max
  #       path: src/ tests/
  #       php_version: 8.4

  # PHP-CS-Fixer:
  #   # name: PHP-CS-Fixer
    # runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Get changed files
  #       id: changed-files
  #       uses: tj-actions/changed-files@v45
  #     - name: Get extra arguments for PHP-CS-Fixer
  #       id: phpcs-intersection
  #       run: |
  #         CHANGED_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n')
  #         if ! echo "${CHANGED_FILES}" | grep -qE "^(\\.php-cs-fixer(\\.dist)?\\.php|composer\\.lock)$"; then EXTRA_ARGS=$(printf -- '--path-mode=intersection\n--\n%s' "${CHANGED_FILES}"); else EXTRA_ARGS=''; fi
  #         echo "PHPCS_EXTRA_ARGS<<EOF" >> $GITHUB_ENV
  #         echo "$EXTRA_ARGS" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV
  #     - name: PHP-CS-Fixer
  #       uses: docker://oskarstark/php-cs-fixer-ga
  #       with:
  #         args: --config=.php-cs-fixer.dist.php -v --dry-run --stop-on-violation --using-cache=no

  PHPUnit:
    name: "Unit Tests - PHP ${{ matrix.php-version }}, ${{ matrix.dependencies }}"
    continue-on-error: ${{ matrix.php-version == '8.4' }}
    env:
      CODE_COVERAGE: none
      LC_ALL: en_US.UTF-8
      PHP_EXTENSIONS: mbstring, xml, ctype, iconv
    # needs: [PHPStan, PHP-CS-Fixer]
    needs: [Action-Linting]
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        php-version:
          # - "8.2"
          # - "8.3"
          - "8.4"
          # - "8.5"
        dependencies:
          - "locked"
        operating-system:
          - "ubuntu-22.04"
        composer:
          - "composer:v2"
        composer-command:
          - "composer install --no-interaction --no-progress --no-suggest"
        # include:
        #   - composer-command: "composer update --prefer-lowest --no-interaction --no-progress --no-suggest"
        #     dependencies: "lowest"
        #     operating-system: "ubuntu-22.04"
        #     php-version: 8.4
        #   - composer-command: "composer update --no-interaction --no-progress --no-suggest"
        #     dependencies: "highest"
        #     operating-system: "ubuntu-22.04"
        #     php-version: 8.4

    steps:
      - name: Enable code coverage and test reporting
        if: matrix.php-version == '8.4' && startsWith(matrix.operating-system, 'ubuntu') && matrix.dependencies == 'locked'
        run: printf 'CODE_COVERAGE=pcov\n' >> "$GITHUB_ENV"
      - name: "Checkout"
        uses: "actions/checkout@v4"
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          coverage: ${{ env.CODE_COVERAGE }}
          tools: ${{ matrix.composer }}
      - name: "Install dependencies"
        run: |
          ${{ matrix.composer-command }}
      - name: "Perform unit tests"
        if: env.CODE_COVERAGE == 'none'
        run: composer test-unit
      - name: "Perform unit tests with test report"
        if: env.CODE_COVERAGE != 'none'
        run: ./vendor/bin/phpunit --configuration ./phpunit.xml --log-junit ./.artifacts/phpunit-report.xml
      - name: Upload artifact
        if: always() && env.CODE_COVERAGE != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-report
          path: .artifacts/phpunit-report.xml
          retention-days: 1
      # - name: "Perform unit tests with coverage"
      #   if: env.CODE_COVERAGE != 'none'
      #   run: |
      #     php ./vendor/bin/phpunit --configuration ./tests/phpunit-cc.xml --coverage-clover=clover.xml --testsuite Unit
      # - name: Make code coverage badge
      #   if: env.CODE_COVERAGE != 'none'
      #   uses: timkrase/phpunit-coverage-badge@v1.2.1
      #   with:
      #     coverage_badge_path: .build/images/badge-coverage.svg
      #     push_badge: true
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Git push to image-data branch
      #   if: env.CODE_COVERAGE != 'none' && github.event_name == 'pull_request'
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     publish_dir: ./output
      #     publish_branch: image-data
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     user_name: 'github-actions[bot]'
      #     user_email: 'github-actions[bot]@users.noreply.github.com'

  test-report:
    env:
      ERROR_COUNT: 0
      FAILURE_COUNT: 0
      GH_TOKEN: ${{ github.token }}
      SKIPPED_COUNT: 0
    if: always()
    name: "Generate test report"
    needs:
      - PHPUnit
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          # cache-dependency-path: ''
      - name: Retriev PHPUnit test report
        uses: actions/download-artifact@v4
        with:
          name: phpunit-report
          path: .artifacts/
      - name: Transform test report to CTRF
        run: npx junit-to-ctrf .artifacts/phpunit-report.xml -o .artifacts/phpunit-report.ctrf.json
      - name: Generate test summary
        run: npx github-actions-ctrf summary .artifacts/phpunit-report.ctrf.json
      - name: Get errors count
        id: errors-count
        run: |
          ERROR_COUNT="$(grep -E 'name=\"/home/' .artifacts/phpunit-report.xml | grep -o -P '(?<=errors=\").*(?=\" fail)')"
          echo "ERROR_COUNT=\"$ERROR_COUNT\"" >> "$GITHUB_ENV"
      - name: Generate failed test summary if necessary
        run: |
          FAILURE_COUNT="$(grep -E 'name=\"/home/' .artifacts/phpunit-report.xml | grep -o -P '(?<=skipped=\").*(?=\" time)')"
          if [ "$FAILURE_COUNT" -ne "0" ]; then
            npx github-actions-ctrf failed .artifacts/phpunit-report.ctrf.json
          fi
      - name: Generate skipped test summary if necessary
        run: |
          SKIPPED_COUNT="$(grep -E 'name=\"/home/' .artifacts/phpunit-report.xml | grep -o -P '(?<=skipped=\").*(?=\" time)')"
          if [ "$SKIPPED_COUNT" -ne "0" ]; then
            npx github-actions-ctrf skipped .artifacts/phpunit-report.ctrf.json
          fi
      - name: Generate tests list
        run: npx github-actions-ctrf tests .artifacts/phpunit-report.ctrf.json --exit-on-fail
